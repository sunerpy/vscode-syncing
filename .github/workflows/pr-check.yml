name: PR Check

on:
  pull_request:
    branches: [ main, master ]

jobs:
  get-env:
    uses: ./.github/workflows/env.yml

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: get-env
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ needs.get-env.outputs.node_version }}

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ needs.get-env.outputs.pnpm_version }}

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Check types
      run: pnpm run check-types

    - name: Lint
      run: pnpm run lint

    - name: Check package.json
      run: |
        # Ê£ÄÊü•package.jsonÊ†ºÂºè
        node -e "JSON.parse(require('fs').readFileSync('package.json', 'utf8'))"
        echo "‚úÖ package.json is valid JSON"

    - name: Check for console.log statements
      run: |
        if grep -r "console\.log" src/; then
          echo "‚ùå Found console.log statements in source code"
          exit 1
        else
          echo "‚úÖ No console.log statements found"
        fi

    - name: Check for TODO comments
      run: |
        if grep -r "TODO" src/; then
          echo "‚ö†Ô∏è  Found TODO comments in source code"
        else
          echo "‚úÖ No TODO comments found"
        fi

    - name: Check file sizes
      run: |
        echo "üìä Checking file sizes..."
        find src/ -name "*.ts" -exec wc -l {} + | sort -nr | head -10

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    needs: get-env
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ needs.get-env.outputs.node_version }}

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ needs.get-env.outputs.pnpm_version }}

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Check for outdated dependencies
      run: |
        echo "üì¶ Checking for outdated dependencies..."
        pnpm outdated || echo "‚úÖ All dependencies are up to date"

    - name: Check for unused dependencies
      run: |
        echo "üîç Checking for unused dependencies..."
        npx depcheck || echo "‚ö†Ô∏è  Some dependencies might be unused"

    - name: Security audit
      run: |
        echo "üîí Running security audit..."
        pnpm audit --audit-level moderate || echo "‚ö†Ô∏è  Security vulnerabilities found"

  build-test:
    name: Build Test
    runs-on: ${{ matrix.os }}
    needs: get-env
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ needs.get-env.outputs.node_version }}

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ needs.get-env.outputs.pnpm_version }}

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Compile
      run: pnpm run compile

    - name: Package extension
      run: pnpm run package:vsix

    - name: Verify VSIX on Linux/macOS
      if: runner.os != 'Windows'
      shell: bash
      run: |
        set -e
        VSIX_FILE=$(ls *.vsix 2>/dev/null || true)
        if [ -z "$VSIX_FILE" ]; then
          echo "‚ùå VSIX file not found"
          exit 1
        fi

        echo "‚úÖ VSIX file created: $VSIX_FILE"
        ls -lh $VSIX_FILE

    - name: Verify VSIX on Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $vsix = Get-ChildItem -Filter *.vsix
        if (-not $vsix) {
          Write-Error "‚ùå VSIX file not found"
          exit 1
        }
        Write-Host "‚úÖ VSIX file created: $($vsix.Name)"
        Get-ChildItem *.vsix | Format-List


    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: vscode-syncing-${{ matrix.os }}
        path: |
          *.vsix
          dist/
        retention-days: 7 