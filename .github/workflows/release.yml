name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Tag name to use for the release"
        required: false

permissions:
  contents: write  # 允许创建 GitHub Release

env:
  PNPM_VERSION: 9.15.0
  NODE_VERSION: 22.13.0
jobs:
  build:
    name: Build Extension
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: pnpm run check-types

      - name: Lint
        run: pnpm run lint

      - name: Compile
        run: pnpm run compile

      - name: Run tests (optional)
        run: |
          echo "Skipping tests in CI"
        # or use: pnpm run test with xvfb if GUI testing is enabled

      - name: Package extension
        run: pnpm run package:vsix

      - name: Extract version
        id: version
        run: |
          TAG=${{ github.event.inputs.tag_name }}
          if [ -z "$TAG" ]; then
            TAG=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$TAG" >> $GITHUB_OUTPUT
          echo "Version: $TAG"

      - name: Upload Extension Package
        uses: actions/upload-artifact@v4
        with:
          name: extension-package
          path: |
            *.vsix
            dist/
          retention-days: 7

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Download Extension Package
        uses: actions/download-artifact@v4
        with:
          name: extension-package

      - name: Extract version
        id: version
        run: |
          TAG=${{ github.event.inputs.tag_name }}
          if [ -z "$TAG" ]; then
            TAG=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$TAG" >> $GITHUB_OUTPUT
          echo "Version: $TAG"

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "*.vsix"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          prerelease: false
          draft: false

      - name: Publish to VS Code Marketplace
        env:
          VSCODE_MARKETPLACE_TOKEN: ${{ secrets.VSCODE_MARKETPLACE_TOKEN }}
        run: |
          VSIX_FILE=$(ls *.vsix | head -n1)
          if [ -n "$VSCODE_MARKETPLACE_TOKEN" ]; then
            echo "Publishing $VSIX_FILE to VS Code Marketplace..."
            npx @vscode/vsce publish --packagePath "$VSIX_FILE" -p $VSCODE_MARKETPLACE_TOKEN
          else
            echo "VSCODE_MARKETPLACE_TOKEN not set, skipping publish"
          fi
