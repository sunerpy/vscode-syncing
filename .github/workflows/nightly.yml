name: Nightly Build

on:
  schedule:
    # 每天凌晨2点运行
    - cron: '0 2 * * *'
  workflow_dispatch: # 允许手动触发

jobs:
  get-env:
    uses: ./.github/workflows/env.yml

  nightly:
    name: Nightly Build
    runs-on: ubuntu-latest
    needs: get-env
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ needs.get-env.outputs.node_version }}

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ needs.get-env.outputs.pnpm_version }}

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Check types
      run: pnpm run check-types

    - name: Lint
      run: pnpm run lint

    - name: Compile
      run: pnpm run compile

    - name: Run tests
      run: pnpm run test

    - name: Package extension
      run: pnpm run package:vsix

    - name: Generate build info
      run: |
        echo "Build Date: $(date)" > build-info.txt
        echo "Commit: ${{ github.sha }}" >> build-info.txt
        echo "Branch: ${{ github.ref_name }}" >> build-info.txt
        echo "Node Version: $(node --version)" >> build-info.txt
        echo "pnpm Version: $(pnpm --version)" >> build-info.txt

    - name: Upload nightly build
      uses: actions/upload-artifact@v4
      with:
        name: vscode-syncing-nightly-${{ needs.get-env.outputs.node_version }}-${{ github.sha }}
        path: |
          *.vsix
          dist/
          build-info.txt
        retention-days: 30

    - name: Check for security vulnerabilities
      run: |
        echo "🔒 Running security audit..."
        pnpm audit --audit-level moderate || echo "⚠️  Security vulnerabilities found"

    - name: Check for outdated dependencies
      run: |
        echo "📦 Checking for outdated dependencies..."
        pnpm outdated || echo "✅ All dependencies are up to date"

    - name: Generate dependency report
      run: |
        echo "# Dependency Report" > dependency-report.md
        echo "Generated on: $(date)" >> dependency-report.md
        echo "" >> dependency-report.md
        echo "## Outdated Dependencies" >> dependency-report.md
        pnpm outdated >> dependency-report.md 2>&1 || echo "All dependencies are up to date" >> dependency-report.md
        echo "" >> dependency-report.md
        echo "## Security Audit" >> dependency-report.md
        pnpm audit --audit-level moderate >> dependency-report.md 2>&1 || echo "No security issues found" >> dependency-report.md

    - name: Upload dependency report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-report-${{ github.sha }}
        path: dependency-report.md
        retention-days: 30 